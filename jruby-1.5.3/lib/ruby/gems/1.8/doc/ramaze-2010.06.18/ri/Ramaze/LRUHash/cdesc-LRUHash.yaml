--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: new
comment: 
  - !ruby/struct:SM::Flow::P 
    body: A Hash-alike LRU cache that provides fine-grained control over content restrictions.
  - !ruby/struct:SM::Flow::P 
    body: "It allows you to set:"
  - !ruby/object:SM::Flow::LIST 
    contents: 
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: a maximum number of elements
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: the maximum amount of memory used for all elements
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: the allowed memory-size per element
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: time to live
    type: :BULLET
  - !ruby/struct:SM::Flow::P 
    body: "Differences to the original implementation include:"
  - !ruby/object:SM::Flow::LIST 
    contents: 
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: The Cache is now a Struct for speed
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: "Object memory size is obtained via Marshal::dump instead of #to_s"
    type: :BULLET
  - !ruby/struct:SM::Flow::P 
    body: Note that due to calculating object size with Marshal, you might have to do some evaluation as to how large your values will be when marshaled, for example a String will have String#size + 10. This differs from object to object and between versions of Marshal, so be generous.
  - !ruby/struct:SM::Flow::P 
    body: Copyright (C) 2002 Yoshinori K. Okuji &lt;okuji@enbug.org&gt; Copyright (c) 2009 Michael Fellinger &lt;manveru@rubyists.com&gt;
  - !ruby/struct:SM::Flow::P 
    body: You may redistribute it and/or modify it under the same terms as Ruby.
constants: 
  - !ruby/object:RI::Constant 
    comment: 
    name: CacheObject
    value: Struct.new(:content, :size, :atime)
  - !ruby/object:RI::Constant 
    comment: 
    name: VERSION
    value: "'0.3'"
  - !ruby/object:RI::Constant 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: On 1.8 we raise IndexError, on 1.9 we raise KeyError
    name: KeyError
    value: "Module.const_defined?(:KeyError) ? KeyError : IndexError"
full_name: Ramaze::LRUHash
includes: 
  - !ruby/object:RI::IncludedModule 
    name: Enumerable
instance_methods: 
  - !ruby/object:RI::MethodSummary 
    name: "[]"
  - !ruby/object:RI::MethodSummary 
    name: "[]="
  - !ruby/object:RI::MethodSummary 
    name: clear
  - !ruby/object:RI::MethodSummary 
    name: delete
  - !ruby/object:RI::MethodSummary 
    name: each_key
  - !ruby/object:RI::MethodSummary 
    name: each_pair
  - !ruby/object:RI::MethodSummary 
    name: each_value
  - !ruby/object:RI::MethodSummary 
    name: empty?
  - !ruby/object:RI::MethodSummary 
    name: expire
  - !ruby/object:RI::MethodSummary 
    name: fetch
  - !ruby/object:RI::MethodSummary 
    name: index
  - !ruby/object:RI::MethodSummary 
    name: invalidate
  - !ruby/object:RI::MethodSummary 
    name: invalidate_all
  - !ruby/object:RI::MethodSummary 
    name: key?
  - !ruby/object:RI::MethodSummary 
    name: keys
  - !ruby/object:RI::MethodSummary 
    name: length
  - !ruby/object:RI::MethodSummary 
    name: size
  - !ruby/object:RI::MethodSummary 
    name: statistics
  - !ruby/object:RI::MethodSummary 
    name: store
  - !ruby/object:RI::MethodSummary 
    name: to_hash
  - !ruby/object:RI::MethodSummary 
    name: value?
  - !ruby/object:RI::MethodSummary 
    name: values
name: LRUHash
superclass: Struct.new(:max_total, :max_value, :max_count, :expiration,                               :hook, :objs, :total_size, :list, :hits, :misses)
