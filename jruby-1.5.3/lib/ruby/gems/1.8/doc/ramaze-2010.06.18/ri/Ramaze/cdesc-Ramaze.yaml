--- !ruby/object:RI::ClassDescription 
attributes: 
  - !ruby/object:RI::Attribute 
    comment: 
    name: options
    rw: RW
class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: acquire
  - !ruby/object:RI::MethodSummary 
    name: const_missing
  - !ruby/object:RI::MethodSummary 
    name: deprecated
  - !ruby/object:RI::MethodSummary 
    name: plugin
  - !ruby/object:RI::MethodSummary 
    name: setup
  - !ruby/object:RI::MethodSummary 
    name: to
comment: 
  - !ruby/struct:SM::Flow::H 
    level: 1
    text: Dictionary
  - !ruby/struct:SM::Flow::P 
    body: The Dictionary class is a Hash that preserves order. So it has some array-like extensions also. By defualt a Dictionary object preserves insertion order, but any order can be specified including alphabetical key order.
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: Usage
  - !ruby/struct:SM::Flow::P 
    body: Just require this file and use Dictionary instead of Hash.
  - !ruby/struct:SM::Flow::VERB 
    body: "  # You can do simply\n  hsh = Dictionary.new\n  hsh['z'] = 1\n  hsh['a'] = 2\n  hsh['c'] = 3\n  p hsh.keys     #=&gt; ['z','a','c']\n\n  # or using Dictionary[] method\n  hsh = Dictionary['z', 1, 'a', 2, 'c', 3]\n  p hsh.keys     #=&gt; ['z','a','c']\n\n  # but this don't preserve order\n  hsh = Dictionary['z'=&gt;1, 'a'=&gt;2, 'c'=&gt;3]\n  p hsh.keys     #=&gt; ['a','c','z']\n\n  # Dictionary has useful extensions: push, pop and unshift\n  p hsh.push('to_end', 15)       #=&gt; true, key added\n  p hsh.push('to_end', 30)       #=&gt; false, already - nothing happen\n  p hsh.unshift('to_begin', 50)  #=&gt; true, key added\n  p hsh.unshift('to_begin', 60)  #=&gt; false, already - nothing happen\n  p hsh.keys                     #=&gt; [&quot;to_begin&quot;, &quot;a&quot;, &quot;c&quot;, &quot;z&quot;, &quot;to_end&quot;]\n  p hsh.pop                      #=&gt; [&quot;to_end&quot;, 15], if nothing remains, return nil\n  p hsh.keys                     #=&gt; [&quot;to_begin&quot;, &quot;a&quot;, &quot;c&quot;, &quot;z&quot;]\n  p hsh.shift                    #=&gt; [&quot;to_begin&quot;, 30], if nothing remains, return nil\n"
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: Usage Notes
  - !ruby/object:SM::Flow::LIST 
    contents: 
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: "You can use #order_by to set internal sort order."
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: "#&lt;&lt; takes a two element [k,v] array and inserts."
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: Use ::auto which creates Dictionay sub-entries as needed.
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: And ::alpha which creates a new Dictionary sorted by key.
    type: :BULLET
constants: 
  - !ruby/object:RI::Constant 
    comment: 
    name: ROOT
    value: File.expand_path(File.dirname(__FILE__)) unless defined?(Ramaze::ROOT)
  - !ruby/object:RI::Constant 
    comment: 
    name: VERSION
    value: "\"2010.06.18\""
  - !ruby/object:RI::Constant 
    comment: 
    name: Helper
    value: Innate::Helper
  - !ruby/object:RI::Constant 
    comment: 
    name: Cache
    value: Innate::Cache
  - !ruby/object:RI::Constant 
    comment: 
    name: Log
    value: Innate::Log
  - !ruby/object:RI::Constant 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: An application is a collection of controllers and options that have a common name. Every application has a location it dispatches from, this behaves similar to Rack::URLMap.
    name: AppMap
    value: Innate::URLMap.new
  - !ruby/object:RI::Constant 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Constant for storing meta-information persistent
    name: OpenIDStore
    value: OpenID::Store::Filesystem.new(openid_store_file)
  - !ruby/object:RI::Constant 
    comment: 
    name: View
    value: Innate::View
  - !ruby/object:RI::Constant 
    comment: 
    name: DEPRECATED_CONSTANTS
    value: "{     :BASEDIR        => :ROOT,     :Template       => :View,     :Optional       => :Optioned,   }"
full_name: Ramaze
includes: []

instance_methods: []

name: Ramaze
superclass: 
