--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Use this to add custom settings to the RSpec.configuration object.
  - !ruby/struct:SM::Flow::VERB 
    body: "  RSpec.configuration.add_setting :foo\n"
  - !ruby/struct:SM::Flow::P 
    body: "Creates three methods on the configuration object, a setter, a getter, and a predicate:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  RSpec.configuration.foo=(value)\n  RSpec.configuration.foo()\n  RSpec.configuration.foo?() # returns !!foo\n"
  - !ruby/struct:SM::Flow::P 
    body: "Intended for extension frameworks like rspec-rails, so they can add config settings that are domain specific. For example:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  RSpec.configure do |c|\n    c.add_setting :use_transactional_fixtures, :default =&gt; true\n    c.add_setting :use_transactional_examples, :alias =&gt; :use_transactional_fixtures\n  end\n"
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: Options
  - !ruby/struct:SM::Flow::P 
    body: "<tt>add_setting</tt> takes an optional hash that supports the following keys:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  :default =&gt; &quot;default value&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: This sets the default value for the getter and the predicate (which will return <tt>true</tt> as long as the value is not <tt>false</tt> or <tt>nil</tt>).
  - !ruby/struct:SM::Flow::VERB 
    body: "  :alias =&gt; :other_setting\n"
  - !ruby/struct:SM::Flow::P 
    body: Aliases its setter, getter, and predicate, to those for the <tt>other_setting</tt>.
full_name: RSpec::Core::Configuration#add_setting
is_singleton: false
name: add_setting
params: |
  add_setting(:name)
  add_setting(:name, :default => "default_value")
  add_setting(:name, :alias => :other_setting)

visibility: public
