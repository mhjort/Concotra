--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Creates a nested example group named by the submitted <tt>attribute</tt>, and then generates an example using the submitted block.
  - !ruby/struct:SM::Flow::VERB 
    body: "  # This ...\n  describe Array do\n    its(:size) { should == 0 }\n  end\n\n  # ... generates the same runtime structure as this:\n  describe Array do\n    describe &quot;size&quot; do\n      it &quot;should == 0&quot; do\n        subject.size.should == 0\n      end\n    end\n  end\n"
  - !ruby/struct:SM::Flow::P 
    body: The attribute can be a <tt>Symbol</tt> or a <tt>String</tt>. Given a <tt>String</tt> with dots, the result is as though you concatenated that <tt>String</tt> onto the subject in an expression.
  - !ruby/struct:SM::Flow::VERB 
    body: "  describe Person do\n    let(:person) do\n      person = Person.new\n      person.phone_numbers &lt;&lt; &quot;555-1212&quot;\n    end\n\n    its(&quot;phone_numbers.first&quot;) { should == &quot;555-1212&quot; }\n  end\n"
  - !ruby/struct:SM::Flow::P 
    body: When the subject is a <tt>Hash</tt>, you can refer to the Hash keys by specifying a <tt>Symbol</tt> or <tt>String</tt> in an array.
  - !ruby/struct:SM::Flow::VERB 
    body: "  describe &quot;a configuration Hash&quot; do\n    subject do\n      {\xC2\xA0:max_users =&gt; 3,\n        'admin' =&gt; :all_permissions }\n    end\n\n    its([:max_users]) { should == 3 }\n    its(['admin']) { should == :all_permissions }\n\n    #\xC2\xA0You can still access to its regular methods this way:\n    its(:keys) { should include(:max_users) }\n    its(:count) { should == 2 }\n  end\n"
full_name: RSpec::Core::Subject::ClassMethods#its
is_singleton: false
name: its
params: (attribute, &block)
visibility: public
