--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
  - !ruby/struct:SM::Flow::P 
    body: Defines aliases for coloured output. You don't invoke any methods from this module directly, but you can change the output colours by defining a <tt>CUCUMBER_COLORS</tt> variable in your shell, very much like how you can tweak the familiar POSIX command <tt>ls</tt> with &lt;a href=&quot;http://mipsisrisc.com/rambling/2008/06/27/lscolorsls_colors-now-with-linux-support/&quot;&gt;$LSCOLORS/$LS_COLORS&lt;/a&gt;
  - !ruby/struct:SM::Flow::P 
    body: "The colours that you can change are:"
  - !ruby/object:SM::Flow::LIST 
    contents: 
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>undefined</tt> - defaults to <tt>yellow</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>pending</tt> - defaults to <tt>yellow</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>pending_param</tt> - defaults to <tt>yellow,bold</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>failed</tt> - defaults to <tt>red</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>failed_param</tt> - defaults to <tt>red,bold</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>passed</tt> - defaults to <tt>green</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>passed_param</tt> - defaults to <tt>green,bold</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>outline</tt> - defaults to <tt>cyan</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>outline_param</tt> - defaults to <tt>cyan,bold</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>skipped</tt> - defaults to <tt>cyan</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>skipped_param</tt> - defaults to <tt>cyan,bold</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>comment</tt> - defaults to <tt>grey</tt>
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: <tt>tag</tt> - defaults to <tt>cyan</tt>
    type: :BULLET
  - !ruby/struct:SM::Flow::P 
    body: "For instance, if your shell has a black background and a green font (like the &quot;Homebrew&quot; settings for OS X' Terminal.app), you may want to override passed steps to be white instead of green. Examples:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  export CUCUMBER_COLORS=&quot;passed=white&quot;\n  export CUCUMBER_COLORS=&quot;passed=white,bold:passed_param=white,bold,underline&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: "(If you're on Windows, use SET instead of export). To see what colours and effects are available, just run this in your shell:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  ruby -e &quot;require 'rubygems'; require 'term/ansicolor'; puts Term::ANSIColor.attributes&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: Although not listed, you can also use <tt>grey</tt>
constants: 
  - !ruby/object:RI::Constant 
    comment: 
    name: ALIASES
    value: Hash.new do |h,k|         if k.to_s =~ /(.*)_param/
full_name: Cucumber::Formatter::ANSIColor
includes: 
  - !ruby/object:RI::IncludedModule 
    name: Term::ANSIColor
instance_methods: []

name: ANSIColor
superclass: 
